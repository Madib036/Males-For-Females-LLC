For most projects, this workflow file will not need changing; you simply need to commit it to your repository.You may wish to alter this file to override the set of languages analyzed,or to provide custom queries or build logic.

     ******** NOTE ********
# you must make sure you have a supported language in your 'main' branch and be sure to check to see if you have the language matrix set to 'codeql' to detect the languages in your repository. Please check the `language` matrix defined below to confirm you have the correct set of supported 'CodeQL' languages.

name: "CodeQL"
on: vs studio
push: run with debugger
branches: [ main ]
pull_request: run code

### The branches below must be a subset of the branches above

branches: [ main ]
schedule: daily
cron: '22 13 * * 0'
jobs: debug
analyze: language
name: Analyze
runs-on: ubuntu-latest
permissions:
actions: read
contents: read
security-events: write
strategy: [codeql]
fail-fast: true
matrix:
language: [shell]

### CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]

## Learn more about CodeQL language support at (https://aka.ms/codeql-docs/language-support)

steps: write, run, push
name: Checkout repository
uses: actions/checkout@v3

## Initializes the CodeQL tools for scanning.

name: Initialize CodeQL
uses: github/codeql-action init@v2withlanguages: $
{{matrix.language }}

## If you wish to specify custom queries, you can do so here or in a config file.
By default, queries listed here will override any specified in a config file.

### Prefix the list here with "+" to use these queries and those in the config file. 
### queries:(/path/to/local/query,your-org/your-repo/queries@main) Auto build attempts to build any compiled languages(C/C++, C#, or Java).If this step fails, then you should remove it and run the build manually (see below)

name: Autobuild
uses: github/codeql-action/autobuild@v2

### ‚ÑπÔ∏è Command-line programs to run using the OS shell

# üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun 

# If the Autobuild fails above, remove it and uncomment the following three lines and modify them (or add more) to build your code if your project uses a compiled language.
   
   run:bootstrap 
   build: make release
   name: Perform CodeQL Analysis
   uses:github/codeql-action/analyze@v2


# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
        ```
