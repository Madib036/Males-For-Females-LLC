PUSH1 0x80
PUSH1 0x40
MSTORE PUSH1 0x04
CALLDATASIZE LT PUSH2 0x0083
JUMPI PUSH1 0x00
CALLDATALOAD PUSH29 0x0100000000000000000000000000000000000000000000000000000000
SWAP1 DIV PUSH4 0xffffffff
AND DUP1 PUSH4 0x025313a2
EQ PUSH2 0x00f2
JUMPI DUP1 PUSH4 0x54fd4d50
EQ PUSH2 0x0149
JUMPI DUP1 PUSH4 0x5a8b1a9f
EQ PUSH2 0x01d9
JUMPI DUP1 PUSH4 0x5c60da1b
EQ PUSH2 0x0262
JUMPI DUP1 PUSH4 0x6fde8202
EQ PUSH2 0x02b9
JUMPI DUP1 PUSH4 0x958a41dd
EQ PUSH2 0x0310
JUMPI DUP1 PUSH4 0xf1739cae
EQ PUSH2 0x03d2
JUMPI JUMPDEST PUSH1 0x00
PUSH2 0x008d
PUSH2 0x0415
JUMP JUMPDEST SWAP1 POP PUSH1 0x00
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND DUP2 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND EQ ISZERO ISZERO ISZERO PUSH2 0x00cb
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST PUSH1 0x40
MLOAD CALLDATASIZE PUSH1 0x00
DUP3 CALLDATACOPY PUSH1 0x00
DUP1 CALLDATASIZE DUP4 DUP6 GAS DELEGATECALL RETURNDATASIZE DUP1 PUSH1 0x00
DUP5 RETURNDATACOPY DUP2 PUSH1 0x00
DUP2 EQ PUSH2 0x00ee
JUMPI DUP2 DUP5 RETURN JUMPDEST DUP2 DUP5 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x00fe
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST POP PUSH2 0x0107
PUSH2 0x043f
JUMP JUMPDEST PUSH1 0x40
MLOAD DUP1 DUP3 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND DUP2 MSTORE PUSH1 0x20
ADD SWAP2 POP POP PUSH1 0x40
MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x0155
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST POP PUSH2 0x015e
PUSH2 0x044e
JUMP JUMPDEST PUSH1 0x40
MLOAD DUP1 DUP1 PUSH1 0x20
ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20
ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20
ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x00
JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x019e
JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20
DUP2 ADD SWAP1 POP PUSH2 0x0183
JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1f
AND DUP1 ISZERO PUSH2 0x01cb
JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x01
DUP4 PUSH1 0x20
SUB PUSH2 0x0100
EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20
ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40
MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x01e5
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST POP PUSH2 0x0260
PUSH1 0x04
DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20
ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x20
ADD SWAP1 DUP1 DUP1 PUSH1 0x1f
ADD PUSH1 0x20
DUP1 SWAP2 DIV MUL PUSH1 0x20
ADD PUSH1 0x40
MLOAD SWAP1 DUP2 ADD PUSH1 0x40
MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20
ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND SWAP1 PUSH1 0x20
ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x04f0
JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x026e
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST POP PUSH2 0x0277
PUSH2 0x0415
JUMP JUMPDEST PUSH1 0x40
MLOAD DUP1 DUP3 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND DUP2 MSTORE PUSH1 0x20
ADD SWAP2 POP POP PUSH1 0x40
MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x02c5
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST POP PUSH2 0x02ce
PUSH2 0x053f
JUMP JUMPDEST PUSH1 0x40
MLOAD DUP1 DUP3 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND DUP2 MSTORE PUSH1 0x20
ADD SWAP2 POP POP PUSH1 0x40
MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x03d0
PUSH1 0x04
DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20
ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x20
ADD SWAP1 DUP1 DUP1 PUSH1 0x1f
ADD PUSH1 0x20
DUP1 SWAP2 DIV MUL PUSH1 0x20
ADD PUSH1 0x40
MLOAD SWAP1 DUP2 ADD PUSH1 0x40
MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20
ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND SWAP1 PUSH1 0x20
ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20
ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x20
ADD SWAP1 DUP1 DUP1 PUSH1 0x1f
ADD PUSH1 0x20
DUP1 SWAP2 DIV MUL PUSH1 0x20
ADD PUSH1 0x40
MLOAD SWAP1 DUP2 ADD PUSH1 0x40
MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20
ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x0569
JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x03de
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST POP PUSH2 0x0413
PUSH1 0x04
DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND SWAP1 PUSH1 0x20
ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x064c
JUMP JUMPDEST STOP JUMPDEST PUSH1 0x00
PUSH1 0x08
PUSH1 0x00
SWAP1 SLOAD SWAP1 PUSH2 0x0100
EXP SWAP1 DIV PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x00
PUSH2 0x0449
PUSH2 0x053f
JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60
PUSH1 0x07
DUP1 SLOAD PUSH1 0x01
DUP2 PUSH1 0x01
AND ISZERO PUSH2 0x0100
MUL SUB AND PUSH1 0x02
SWAP1 DIV DUP1 PUSH1 0x1f
ADD PUSH1 0x20
DUP1 SWAP2 DIV MUL PUSH1 0x20
ADD PUSH1 0x40
MLOAD SWAP1 DUP2 ADD PUSH1 0x40
MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20
ADD DUP3 DUP1 SLOAD PUSH1 0x01
DUP2 PUSH1 0x01
AND ISZERO PUSH2 0x0100
MUL SUB AND PUSH1 0x02
SWAP1 DIV DUP1 ISZERO PUSH2 0x04e6
JUMPI DUP1 PUSH1 0x1f
LT PUSH2 0x04bb
JUMPI PUSH2 0x0100
DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20
ADD SWAP2 PUSH2 0x04e6
JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x00
MSTORE PUSH1 0x20
PUSH1 0x00
SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x01
ADD SWAP1 PUSH1 0x20
ADD DUP1 DUP4 GT PUSH2 0x04c9
JUMPI DUP3 SWAP1 SUB PUSH1 0x1f
AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x04f8
PUSH2 0x043f
JUMP JUMPDEST PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND CALLER PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND EQ ISZERO ISZERO PUSH2 0x0531
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST PUSH2 0x053b
DUP3 DUP3 PUSH2 0x0773
JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x00
PUSH1 0x06
PUSH1 0x00
SWAP1 SLOAD SWAP1 PUSH2 0x0100
EXP SWAP1 DIV PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x0571
PUSH2 0x043f
JUMP JUMPDEST PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND CALLER PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND EQ ISZERO ISZERO PUSH2 0x05aa
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST PUSH2 0x05b4
DUP4 DUP4 PUSH2 0x04f0
JUMP JUMPDEST ADDRESS PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND CALLVALUE DUP3 PUSH1 0x40
MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20
ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x00
JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x05fa
JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20
DUP2 ADD SWAP1 POP PUSH2 0x05df
JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1f
AND DUP1 ISZERO PUSH2 0x0627
JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x01
DUP4 PUSH1 0x20
SUB PUSH2 0x0100
EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20
ADD SWAP2 POP JUMPDEST POP SWAP2 POP POP PUSH1 0x00
PUSH1 0x40
MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP ISZERO ISZERO PUSH2 0x0647
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x0654
PUSH2 0x043f
JUMP JUMPDEST PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND CALLER PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND EQ ISZERO ISZERO PUSH2 0x068d
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST PUSH1 0x00
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND DUP2 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND EQ ISZERO ISZERO ISZERO PUSH2 0x06c9
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST PUSH2 0x06d2
DUP2 PUSH2 0x08df
JUMP JUMPDEST PUSH32 0x5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd9
PUSH2 0x06fb
PUSH2 0x043f
JUMP JUMPDEST DUP3 PUSH1 0x40
MLOAD DUP1 DUP4 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND DUP2 MSTORE PUSH1 0x20
ADD DUP3 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND DUP2 MSTORE PUSH1 0x20
ADD SWAP3 POP POP POP PUSH1 0x40
MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST DUP1 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND PUSH1 0x08
PUSH1 0x00
SWAP1 SLOAD SWAP1 PUSH2 0x0100
EXP SWAP1 DIV PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND EQ ISZERO ISZERO ISZERO PUSH2 0x07d0
JUMPI PUSH1 0x00
DUP1 REVERT JUMPDEST DUP2 PUSH1 0x07
SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20
ADD SWAP1 PUSH2 0x07e6
SWAP3 SWAP2 SWAP1 PUSH2 0x0923
JUMP JUMPDEST POP DUP1 PUSH1 0x08
PUSH1 0x00
PUSH2 0x0100
EXP DUP2 SLOAD DUP2 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
MUL NOT AND SWAP1 DUP4 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND PUSH32 0x8e05e0e35ff592971ca8b477d4285a33a61ded208d644042667b78693a472f5e
DUP4 PUSH1 0x40
MLOAD DUP1 DUP1 PUSH1 0x20
ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20
ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20
ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x00
JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x08a1
JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20
DUP2 ADD SWAP1 POP PUSH2 0x0886
JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1f
AND DUP1 ISZERO PUSH2 0x08ce
JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x01
DUP4 PUSH1 0x20
SUB PUSH2 0x0100
EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20
ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40
MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x06
PUSH1 0x00
PUSH2 0x0100
EXP DUP2 SLOAD DUP2 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
MUL NOT AND SWAP1 DUP4 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x01
DUP2 PUSH1 0x01
AND ISZERO PUSH2 0x0100
MUL SUB AND PUSH1 0x02
SWAP1 DIV SWAP1 PUSH1 0x00
MSTORE PUSH1 0x20
PUSH1 0x00
SHA3 SWAP1 PUSH1 0x1f
ADD PUSH1 0x20
SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1f
LT PUSH2 0x0964
JUMPI DUP1 MLOAD PUSH1 0xff
NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x0992
JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x01
ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x0992
JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x0991
JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20
ADD SWAP2 SWAP1 PUSH1 0x01
ADD SWAP1 PUSH2 0x0976
JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x099f
SWAP2 SWAP1 PUSH2 0x09a3
JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x09c5
SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x09c1
JUMPI PUSH1 0x00
DUP2 PUSH1 0x00
SWAP1 SSTORE POP PUSH1 0x01
ADD PUSH2 0x09a9
JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP STOP LOG1 PUSH6 0x627a7a723058
SHA3 CALLCODE [0xcb] PC BALANCE CODESIZE [0xfe] DUP4 DELEGATECALL PUSH21 0x196339e32c7df5998c88562a535cfeb1540ec7ee4d
BLOCKHASH [0xe8] STOP [0x29] 
# Palkeoramix decompiler. 

def storage:
  upgradeabilityOwner is addr at storage 6
  version is array of uint256 at storage 7
  implementationAddress is addr at storage 8

def proxyOwner(): # not payable
  return upgradeabilityOwner

def version(): # not payable
  return version[0 len version.length]

def implementation(): # not payable
  return implementationAddress

def upgradeabilityOwner(): # not payable
  return upgradeabilityOwner

#
#  Regular functions
#

def transferProxyOwnership(address _newOwner): # not payable
  require caller == upgradeabilityOwner
  require _newOwner
  upgradeabilityOwner = _newOwner
  log ProxyOwnershipTransferred(
        address previousOwner=upgradeabilityOwner,
        address newOwner=_newOwner)

def _fallback() payable: # default function
  require implementationAddress
  delegate implementationAddress with:
     funct call.data[0 len 4]
       gas gas_remaining wei
      args call.data[4 len calldata.size - 4]
  if not delegate.return_code:
      revert with ext_call.return_data[0 len return_data.size]
  return ext_call.return_data[0 len return_data.size]

def upgradeTo(string _version, address _implementation): # not payable
  require caller == upgradeabilityOwner
  require implementationAddress != _implementation
  version[] = Array(len=_version.length, data=_version[all])
  implementationAddress = _implementation
  log Upgraded(
        string version=Array(len=_version.length, data=_version[all]),
        address implementation=_implementation)

def upgradeToAndCall(string _version, address _implementation, bytes _data) payable: 
  mem[128 len _version.length] = _version[all]
  mem[ceil32(_version.length) + 128] = _data.length
  mem[ceil32(_version.length) + 160 len _data.length] = _data[all]
  require caller == upgradeabilityOwner
  require implementationAddress != _implementation
  version[] = Array(len=_version.length, data=_version[all])
  implementationAddress = _implementation
  mem[ceil32(_version.length) + ceil32(_data.length) + 160] = 32
  mem[ceil32(_version.length) + ceil32(_data.length) + 192] = _version.length
  mem[ceil32(_version.length) + ceil32(_data.length) + 224 len ceil32(_version.length)] = _version[all], mem[_version.length + 128 len ceil32(_version.length) - _version.length]
  log Upgraded(
        string version=Array(len=_version.length, data=_version[all]),
        address implementation=_implementation)
  mem[ceil32(_version.length) + ceil32(_data.length) + 160 len ceil32(_data.length)] = _data[all], mem[ceil32(_version.length) + _data.length + 160 len ceil32(_data.length) - _data.length]
  if not _data.length % 32:
      call this.address.mem[ceil32(_version.length) + ceil32(_data.length) + 160 len 4] with:
         value call.value wei
           gas gas_remaining wei
          args mem[ceil32(_version.length) + ceil32(_data.length) + 164 len _data.length - 4]
  else:
      mem[floor32(_data.length) + ceil32(_version.length) + ceil32(_data.length) + 160] = mem[floor32(_data.length) + ceil32(_version.length) + ceil32(_data.length) + -(_data.length % 32) + 192 len _data.length % 32]
      call this.address.mem[ceil32(_version.length) + ceil32(_data.length) + 160 len 4] with:
         value call.value wei
           gas gas_remaining wei
          args mem[ceil32(_version.length) + ceil32(_data.length) + 164 len floor32(_data.length) + 28]
  require ext_call.success

